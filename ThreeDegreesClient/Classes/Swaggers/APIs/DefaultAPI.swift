//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class DefaultAPI: APIBase {
    /**

     - parameter limit: (query)  (optional, default to 100)
     - parameter page: (query)  (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func activityGet(limit limit: Int32? = nil, page: Int32? = nil, completion: ((data: [Activity]?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        activityGetWithRequestBuilder(limit: limit, page: page).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - GET /activity
     - Get the recent activity for the logged-in user, in reverse chronological order
     - examples: [{contentType=application/json, example=[ {
  "endpoints" : [ {
    "message" : "aeiou",
    "uri" : "aeiou"
  } ],
  "viewed" : true,
  "icon" : "aeiou",
  "id" : "",
  "text" : "aeiou",
  "timestamp" : { }
} ]}]
     
     - parameter limit: (query)  (optional, default to 100)
     - parameter page: (query)  (optional, default to 0)

     - returns: RequestBuilder<[Activity]> 
     */
    public class func activityGetWithRequestBuilder(limit limit: Int32? = nil, page: Int32? = nil) -> RequestBuilder<[Activity]> {
        let path = "/activity"
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "limit": limit?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<[Activity]>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func activityIdPut(id id: Int32, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        activityIdPutWithRequestBuilder(id: id).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PUT /activity/{id}
     - Set the activity as viewed by the user
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter id: (path)  

     - returns: RequestBuilder<Empty> 
     */
    public class func activityIdPutWithRequestBuilder(id id: Int32) -> RequestBuilder<Empty> {
        var path = "/activity/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func authDelete(completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        authDeleteWithRequestBuilder().execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - DELETE /auth
     - Logout the user by invalidating the session-key in the header. Other session-keys for the user may still be valid.
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    public class func authDeleteWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/auth"
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter emailAddress: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func authForgotPasswordPut(emailAddress emailAddress: String, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        authForgotPasswordPutWithRequestBuilder(emailAddress: emailAddress).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PUT /auth/forgot-password
     - Initiate the forgot-password process.
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter emailAddress: (body)  

     - returns: RequestBuilder<Empty> 
     */
    public class func authForgotPasswordPutWithRequestBuilder(emailAddress emailAddress: String) -> RequestBuilder<Empty> {
        let path = "/auth/forgot-password"
        let URLString = ThreeDegreesClientAPI.basePath + path
        let parameters = emailAddress.encodeToJSON() as? [String:AnyObject]

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**
     * enum for parameter loginType
     */
    public enum LoginType_authLoginTypePut: String { 
        case Email = "email"
        case Facebook = "facebook"
    }

    /**

     - parameter loginType: (path)  
     - parameter loginForm: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func authLoginTypePut(loginType loginType: LoginType_authLoginTypePut, loginForm: LoginForm, completion: ((data: SessionKey?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        authLoginTypePutWithRequestBuilder(loginType: loginType, loginForm: loginForm).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PUT /auth/{loginType}
     - Login the user. The content in the request body is determined by login-type. email: password facebook: auth code
     - examples: [{contentType=application/json, example={
  "key" : "aeiou"
}}]
     
     - parameter loginType: (path)  
     - parameter loginForm: (body)  

     - returns: RequestBuilder<SessionKey> 
     */
    public class func authLoginTypePutWithRequestBuilder(loginType loginType: LoginType_authLoginTypePut, loginForm: LoginForm) -> RequestBuilder<SessionKey> {
        var path = "/auth/{loginType}"
        path = path.stringByReplacingOccurrencesOfString("{loginType}", withString: "\(loginType.rawValue)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path
        let parameters = loginForm.encodeToJSON() as? [String:AnyObject]

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<SessionKey>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter username: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func connectionsUsernameDelete(username username: String, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        connectionsUsernameDeleteWithRequestBuilder(username: username).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - DELETE /connections/{username}
     - Remove the connection between the \"username\" user and the logged-in user
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter username: (path)  

     - returns: RequestBuilder<Empty> 
     */
    public class func connectionsUsernameDeleteWithRequestBuilder(username username: String) -> RequestBuilder<Empty> {
        var path = "/connections/{username}"
        path = path.stringByReplacingOccurrencesOfString("{username}", withString: "\(username)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter username: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func connectionsUsernamePut(username username: String, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        connectionsUsernamePutWithRequestBuilder(username: username).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PUT /connections/{username}
     - Accept a connection request from the \"username\" user to the logged-in user
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter username: (path)  

     - returns: RequestBuilder<Empty> 
     */
    public class func connectionsUsernamePutWithRequestBuilder(username username: String) -> RequestBuilder<Empty> {
        var path = "/connections/{username}"
        path = path.stringByReplacingOccurrencesOfString("{username}", withString: "\(username)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter contentType: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentContentTypeGet(contentType contentType: String, completion: ((data: Content?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        contentContentTypeGetWithRequestBuilder(contentType: contentType).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - GET /content/{contentType}
     - Get static content. Current supported content-type: tos, privacy-policy, faq.
     - examples: [{contentType=application/json, example={
  "content" : "aeiou"
}}]
     
     - parameter contentType: (path)  

     - returns: RequestBuilder<Content> 
     */
    public class func contentContentTypeGetWithRequestBuilder(contentType contentType: String) -> RequestBuilder<Content> {
        var path = "/content/{contentType}"
        path = path.stringByReplacingOccurrencesOfString("{contentType}", withString: "\(contentType)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Content>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter username: (path)  
     - parameter date: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func matchesUsernameDatesPatch(username username: String, date: NSDate, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        matchesUsernameDatesPatchWithRequestBuilder(username: username, date: date).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PATCH /matches/{username}/dates
     - Accept the given date
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter username: (path)  
     - parameter date: (body)  

     - returns: RequestBuilder<Empty> 
     */
    public class func matchesUsernameDatesPatchWithRequestBuilder(username username: String, date: NSDate) -> RequestBuilder<Empty> {
        var path = "/matches/{username}/dates"
        path = path.stringByReplacingOccurrencesOfString("{username}", withString: "\(username)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path
        let parameters = date.encodeToJSON() as? [String:AnyObject]

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter username: (path)  
     - parameter dates: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func matchesUsernameDatesPut(username username: String, dates: [NSDate], completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        matchesUsernameDatesPutWithRequestBuilder(username: username, dates: dates).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PUT /matches/{username}/dates
     - Suggest times for dates with the matched user
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter username: (path)  
     - parameter dates: (body)  

     - returns: RequestBuilder<Empty> 
     */
    public class func matchesUsernameDatesPutWithRequestBuilder(username username: String, dates: [NSDate]) -> RequestBuilder<Empty> {
        var path = "/matches/{username}/dates"
        path = path.stringByReplacingOccurrencesOfString("{username}", withString: "\(username)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path
        let parameters = dates.encodeToJSON() as? [String:AnyObject]

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter username: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func matchesUsernameDelete(username username: String, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        matchesUsernameDeleteWithRequestBuilder(username: username).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - DELETE /matches/{username}
     - Logged-in user declines a suggested match with the given username. Will notify the other single and all associated matchmakers.
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter username: (path)  

     - returns: RequestBuilder<Empty> 
     */
    public class func matchesUsernameDeleteWithRequestBuilder(username username: String) -> RequestBuilder<Empty> {
        var path = "/matches/{username}"
        path = path.stringByReplacingOccurrencesOfString("{username}", withString: "\(username)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter username: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func matchesUsernamePut(username username: String, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        matchesUsernamePutWithRequestBuilder(username: username).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PUT /matches/{username}
     - Logged-in user accepts a suggested match with the given username. Will notify the other single and all associated matchmakers.
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter username: (path)  

     - returns: RequestBuilder<Empty> 
     */
    public class func matchesUsernamePutWithRequestBuilder(username username: String) -> RequestBuilder<Empty> {
        var path = "/matches/{username}"
        path = path.stringByReplacingOccurrencesOfString("{username}", withString: "\(username)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter limit: (query)  (optional, default to 100)
     - parameter page: (query)  (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func matchmakersGet(limit limit: Int32? = nil, page: Int32? = nil, completion: ((data: [User]?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        matchmakersGetWithRequestBuilder(limit: limit, page: page).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - GET /matchmakers
     - Get the list of matchmakers for the logged-in user. If page > 0 and the result list is empty, there are no more connected users to show.
     - responseHeaders: [count(Int32), limit(Int32), page(Int32)]
     - responseHeaders: [count(Int32), limit(Int32), page(Int32)]
     - responseHeaders: [count(Int32), limit(Int32), page(Int32)]
     - examples: [{contentType=application/json, example=[ "" ]}]
     
     - parameter limit: (query)  (optional, default to 100)
     - parameter page: (query)  (optional, default to 0)

     - returns: RequestBuilder<[User]> 
     */
    public class func matchmakersGetWithRequestBuilder(limit limit: Int32? = nil, page: Int32? = nil) -> RequestBuilder<[User]> {
        let path = "/matchmakers"
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "limit": limit?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<[User]>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func meGet(completion: ((data: PrivateUser?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        meGetWithRequestBuilder().execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - GET /me
     - Get the logged-in user's information.
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<PrivateUser> 
     */
    public class func meGetWithRequestBuilder() -> RequestBuilder<PrivateUser> {
        let path = "/me"
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<PrivateUser>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter image: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func meImagePost(image image: NSURL, completion: ((data: Image?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        meImagePostWithRequestBuilder(image: image).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - POST /me/image
     - Upload an image for the logged-in user. Will automatically set the user's image URL to the URL where the image is saved. Only JPG and PNG are supported.
     - examples: [{contentType=application/json, example={
  "url" : "aeiou"
}}]
     
     - parameter image: (form)  

     - returns: RequestBuilder<Image> 
     */
    public class func meImagePostWithRequestBuilder(image image: NSURL) -> RequestBuilder<Image> {
        let path = "/me/image"
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "image": image
        ]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Image>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func meIsSingleDelete(completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        meIsSingleDeleteWithRequestBuilder().execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - DELETE /me/is-single
     - Toggle the \"single\" flag to false. All users are considered available to be matchmakers.
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    public class func meIsSingleDeleteWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/me/is-single"
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func meIsSinglePut(completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        meIsSinglePutWithRequestBuilder().execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PUT /me/is-single
     - Toggle the \"single\" flag to true. All users are considered available to be matchmakers.
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<Empty> 
     */
    public class func meIsSinglePutWithRequestBuilder() -> RequestBuilder<Empty> {
        let path = "/me/is-single"
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**
     * enum for parameter gender
     */
    public enum Gender_meMatchWithPut: String { 
        case Female = "female"
        case Male = "male"
    }

    /**

     - parameter gender: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func meMatchWithPut(gender gender: Gender_meMatchWithPut? = nil, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        meMatchWithPutWithRequestBuilder(gender: gender).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PUT /me/match-with
     - Set the gender preference that the single would like to be paired with. Set to empty string for any gender.
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter gender: (query)  (optional)

     - returns: RequestBuilder<Empty> 
     */
    public class func meMatchWithPutWithRequestBuilder(gender gender: Gender_meMatchWithPut? = nil) -> RequestBuilder<Empty> {
        let path = "/me/match-with"
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "gender": gender?.rawValue
        ]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter user: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func mePut(user user: UserForm, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        mePutWithRequestBuilder(user: user).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PUT /me
     - Update the logged-in user's record.
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter user: (body)  

     - returns: RequestBuilder<Empty> 
     */
    public class func mePutWithRequestBuilder(user user: UserForm) -> RequestBuilder<Empty> {
        let path = "/me"
        let URLString = ThreeDegreesClientAPI.basePath + path
        let parameters = user.encodeToJSON() as? [String:AnyObject]

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter username: (path)  
     - parameter limit: (query)  (optional, default to 100)
     - parameter page: (query)  (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func messagesUsernameGet(username username: String, limit: Int32? = nil, page: Int32? = nil, completion: ((data: [Message]?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        messagesUsernameGetWithRequestBuilder(username: username, limit: limit, page: page).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - GET /messages/{username}
     - Get the messages sent between the logged in user and the \"username\" user, ordered reverse chronologically
     - responseHeaders: [count(Int32), limit(Int32), page(Int32)]
     - responseHeaders: [count(Int32), limit(Int32), page(Int32)]
     - responseHeaders: [count(Int32), limit(Int32), page(Int32)]
     - examples: [{contentType=application/json, example=[ {
  "sender" : "aeiou",
  "recipient" : "aeiou",
  "message_type" : "aeiou",
  "message" : "aeiou",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter username: (path)  
     - parameter limit: (query)  (optional, default to 100)
     - parameter page: (query)  (optional, default to 0)

     - returns: RequestBuilder<[Message]> 
     */
    public class func messagesUsernameGetWithRequestBuilder(username username: String, limit: Int32? = nil, page: Int32? = nil) -> RequestBuilder<[Message]> {
        var path = "/messages/{username}"
        path = path.stringByReplacingOccurrencesOfString("{username}", withString: "\(username)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "limit": limit?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<[Message]>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter username: (path)  
     - parameter image: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func messagesUsernameImagePost(username username: String, image: NSURL, completion: ((data: Image?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        messagesUsernameImagePostWithRequestBuilder(username: username, image: image).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - POST /messages/{username}/image
     - Upload an image to be sent from logged-in user to the username user. Only JPG and PNG are supported.
     - examples: [{contentType=application/json, example={
  "url" : "aeiou"
}}]
     
     - parameter username: (path)  
     - parameter image: (form)  

     - returns: RequestBuilder<Image> 
     */
    public class func messagesUsernameImagePostWithRequestBuilder(username username: String, image: NSURL) -> RequestBuilder<Image> {
        var path = "/messages/{username}/image"
        path = path.stringByReplacingOccurrencesOfString("{username}", withString: "\(username)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "image": image
        ]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Image>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter username: (path)  
     - parameter message: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func messagesUsernamePut(username username: String, message: MessageForm, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        messagesUsernamePutWithRequestBuilder(username: username, message: message).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PUT /messages/{username}
     - Send a message from the logged in user to the \"username\" user
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter username: (path)  
     - parameter message: (body)  

     - returns: RequestBuilder<Empty> 
     */
    public class func messagesUsernamePutWithRequestBuilder(username username: String, message: MessageForm) -> RequestBuilder<Empty> {
        var path = "/messages/{username}"
        path = path.stringByReplacingOccurrencesOfString("{username}", withString: "\(username)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path
        let parameters = message.encodeToJSON() as? [String:AnyObject]

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter limit: (query)  (optional, default to 100)
     - parameter page: (query)  (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func singlesGet(limit limit: Int32? = nil, page: Int32? = nil, completion: ((data: [User]?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        singlesGetWithRequestBuilder(limit: limit, page: page).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - GET /singles
     - Get the list of singles for the logged-in user. If page > 0 and the result list is empty, there are no more connected users to show.
     - responseHeaders: [count(Int32), limit(Int32), page(Int32)]
     - responseHeaders: [count(Int32), limit(Int32), page(Int32)]
     - responseHeaders: [count(Int32), limit(Int32), page(Int32)]
     - examples: [{contentType=application/json, example=[ "" ]}]
     
     - parameter limit: (query)  (optional, default to 100)
     - parameter page: (query)  (optional, default to 0)

     - returns: RequestBuilder<[User]> 
     */
    public class func singlesGetWithRequestBuilder(limit limit: Int32? = nil, page: Int32? = nil) -> RequestBuilder<[User]> {
        let path = "/singles"
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "limit": limit?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<[User]>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter username: (path)  
     - parameter matchUsername: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func singlesUsernamePatch(username username: String, matchUsername: String, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        singlesUsernamePatchWithRequestBuilder(username: username, matchUsername: matchUsername).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PATCH /singles/{username}
     - For matchmaker mode only. Mark the logged-in matchmaker's connected single as having been viewed next to the match_username user. Fails if either party is not a single.
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter username: (path)  
     - parameter matchUsername: (body)  

     - returns: RequestBuilder<Empty> 
     */
    public class func singlesUsernamePatchWithRequestBuilder(username username: String, matchUsername: String) -> RequestBuilder<Empty> {
        var path = "/singles/{username}"
        path = path.stringByReplacingOccurrencesOfString("{username}", withString: "\(username)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path
        let parameters = matchUsername.encodeToJSON() as? [String:AnyObject]

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter username: (path)  
     - parameter matchUsername: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func singlesUsernamePut(username username: String, matchUsername: String, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        singlesUsernamePutWithRequestBuilder(username: username, matchUsername: matchUsername).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PUT /singles/{username}
     - For matchmaker mode only. Set-up the logged-in matchmaker's connected single with the match_username user. Fails if either party is not a single. All matchmakers connected to the single will be notified of the match. Both singles in the match will also be notified of the match.
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter username: (path)  
     - parameter matchUsername: (body)  

     - returns: RequestBuilder<Empty> 
     */
    public class func singlesUsernamePutWithRequestBuilder(username username: String, matchUsername: String) -> RequestBuilder<Empty> {
        var path = "/singles/{username}"
        path = path.stringByReplacingOccurrencesOfString("{username}", withString: "\(username)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path
        let parameters = matchUsername.encodeToJSON() as? [String:AnyObject]

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_subscriptionsTypeDelete: String { 
        case IosPush = "ios_push"
    }

    /**

     - parameter type: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func subscriptionsTypeDelete(type type: ModelType_subscriptionsTypeDelete, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        subscriptionsTypeDeleteWithRequestBuilder(type: type).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - DELETE /subscriptions/{type}
     - Delete the subscription to the given subscription type.
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter type: (path)  

     - returns: RequestBuilder<Empty> 
     */
    public class func subscriptionsTypeDeleteWithRequestBuilder(type type: ModelType_subscriptionsTypeDelete) -> RequestBuilder<Empty> {
        var path = "/subscriptions/{type}"
        path = path.stringByReplacingOccurrencesOfString("{type}", withString: "\(type.rawValue)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_subscriptionsTypeGet: String { 
        case IosPush = "ios_push"
    }

    /**

     - parameter type: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func subscriptionsTypeGet(type type: ModelType_subscriptionsTypeGet, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        subscriptionsTypeGetWithRequestBuilder(type: type).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - GET /subscriptions/{type}
     - Get the status of the subscription to the given subscription type.
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter type: (path)  

     - returns: RequestBuilder<Empty> 
     */
    public class func subscriptionsTypeGetWithRequestBuilder(type type: ModelType_subscriptionsTypeGet) -> RequestBuilder<Empty> {
        var path = "/subscriptions/{type}"
        path = path.stringByReplacingOccurrencesOfString("{type}", withString: "\(type.rawValue)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_subscriptionsTypePut: String { 
        case IosPush = "ios_push"
    }

    /**

     - parameter type: (path)  
     - parameter metadata: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func subscriptionsTypePut(type type: ModelType_subscriptionsTypePut, metadata: SubscriptionMetadata? = nil, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        subscriptionsTypePutWithRequestBuilder(type: type, metadata: metadata).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PUT /subscriptions/{type}
     - Add the subscription to the given subscription type.
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter type: (path)  
     - parameter metadata: (body)  (optional)

     - returns: RequestBuilder<Empty> 
     */
    public class func subscriptionsTypePutWithRequestBuilder(type type: ModelType_subscriptionsTypePut, metadata: SubscriptionMetadata? = nil) -> RequestBuilder<Empty> {
        var path = "/subscriptions/{type}"
        path = path.stringByReplacingOccurrencesOfString("{type}", withString: "\(type.rawValue)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path
        let parameters = metadata?.encodeToJSON() as? [String:AnyObject]

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter version: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func supportedVersionsVersionGet(version version: String, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        supportedVersionsVersionGetWithRequestBuilder(version: version).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - GET /supported-versions/{version}
     - Check to see if the given version is supported by the app.
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter version: (path)  

     - returns: RequestBuilder<Empty> 
     */
    public class func supportedVersionsVersionGetWithRequestBuilder(version version: String) -> RequestBuilder<Empty> {
        var path = "/supported-versions/{version}"
        path = path.stringByReplacingOccurrencesOfString("{version}", withString: "\(version)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**
     * enum for parameter gender
     */
    public enum Gender_usersGet: String { 
        case Female = "female"
        case Male = "male"
    }

    /**

     - parameter matchmaker: (query) Find only singles connected to this matchmaker (username). (optional)
     - parameter query: (query) Text to search for. Will look at the user&#39;s name and username. (optional)
     - parameter singlesOnly: (query) Use this to filter only singles or matchmakers. (optional)
     - parameter forMyMatches: (query) Results should only include people who can be matched with the logged-in user&#39;s singles. (optional)
     - parameter ageRange: (query) Filter the results to only results within this age range. (optional)
     - parameter gender: (query)  (optional)
     - parameter limit: (query)  (optional, default to 100)
     - parameter page: (query)  (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func usersGet(matchmaker matchmaker: String? = nil, query: String? = nil, singlesOnly: Bool? = nil, forMyMatches: Bool? = nil, ageRange: String? = nil, gender: Gender_usersGet? = nil, limit: Int32? = nil, page: Int32? = nil, completion: ((data: [User]?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        usersGetWithRequestBuilder(matchmaker: matchmaker, query: query, singlesOnly: singlesOnly, forMyMatches: forMyMatches, ageRange: ageRange, gender: gender, limit: limit, page: page).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - GET /users
     - Search for users
     - responseHeaders: [count(Int32), limit(Int32), page(Int32)]
     - responseHeaders: [count(Int32), limit(Int32), page(Int32)]
     - responseHeaders: [count(Int32), limit(Int32), page(Int32)]
     - examples: [{contentType=application/json, example=[ "" ]}]
     
     - parameter matchmaker: (query) Find only singles connected to this matchmaker (username). (optional)
     - parameter query: (query) Text to search for. Will look at the user&#39;s name and username. (optional)
     - parameter singlesOnly: (query) Use this to filter only singles or matchmakers. (optional)
     - parameter forMyMatches: (query) Results should only include people who can be matched with the logged-in user&#39;s singles. (optional)
     - parameter ageRange: (query) Filter the results to only results within this age range. (optional)
     - parameter gender: (query)  (optional)
     - parameter limit: (query)  (optional, default to 100)
     - parameter page: (query)  (optional, default to 0)

     - returns: RequestBuilder<[User]> 
     */
    public class func usersGetWithRequestBuilder(matchmaker matchmaker: String? = nil, query: String? = nil, singlesOnly: Bool? = nil, forMyMatches: Bool? = nil, ageRange: String? = nil, gender: Gender_usersGet? = nil, limit: Int32? = nil, page: Int32? = nil) -> RequestBuilder<[User]> {
        let path = "/users"
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "matchmaker": matchmaker,
            "query": query,
            "singles_only": singlesOnly,
            "for_my_matches": forMyMatches,
            "age_range": ageRange,
            "gender": gender?.rawValue,
            "limit": limit?.encodeToJSON(),
            "page": page?.encodeToJSON()
        ]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<[User]>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter userForm: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func usersPut(userForm userForm: UserForm? = nil, completion: ((data: SessionKey?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        usersPutWithRequestBuilder(userForm: userForm).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PUT /users
     - Create a user. Either PrivateUser or fb-auth-code is required (see UserForm defintion for details). For user profile updates, see PUT /me.
     - examples: [{contentType=application/json, example={
  "key" : "aeiou"
}}]
     
     - parameter userForm: (body)  (optional)

     - returns: RequestBuilder<SessionKey> 
     */
    public class func usersPutWithRequestBuilder(userForm userForm: UserForm? = nil) -> RequestBuilder<SessionKey> {
        let path = "/users"
        let URLString = ThreeDegreesClientAPI.basePath + path
        let parameters = userForm?.encodeToJSON() as? [String:AnyObject]

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<SessionKey>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter username: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func usersUsernameConnectionsPut(username username: String, completion: ((data: Empty?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        usersUsernameConnectionsPutWithRequestBuilder(username: username).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - PUT /users/{username}/connections
     - Add a connection request from the logged-in user to the \"username\" user
     - examples: [{contentType=application/json, example={ }}]
     
     - parameter username: (path)  

     - returns: RequestBuilder<Empty> 
     */
    public class func usersUsernameConnectionsPutWithRequestBuilder(username username: String) -> RequestBuilder<Empty> {
        var path = "/users/{username}/connections"
        path = path.stringByReplacingOccurrencesOfString("{username}", withString: "\(username)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<Empty>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

    /**

     - parameter username: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func usersUsernameGet(username username: String, completion: ((data: User?, error: ErrorType?, headers: Dictionary<NSObject, AnyObject>) -> Void)) {
        usersUsernameGetWithRequestBuilder(username: username).execute { (response, error, headers) -> Void in
            completion(data: response?.body, error: error, headers: headers);
        }
    }


    /**
     - GET /users/{username}
     - Get user details
     - examples: [{contentType=application/json, example=""}]
     
     - parameter username: (path)  

     - returns: RequestBuilder<User> 
     */
    public class func usersUsernameGetWithRequestBuilder(username username: String) -> RequestBuilder<User> {
        var path = "/users/{username}"
        path = path.stringByReplacingOccurrencesOfString("{username}", withString: "\(username)", options: .LiteralSearch, range: nil)
        let URLString = ThreeDegreesClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]

        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilderClass: RequestBuilder<User>.Type = ThreeDegreesClientAPI.requestBuilderFactory.getBuilder()
        let requestBuilder = requestBuilderClass.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
        requestBuilder.addHeaders(["Accept": "application/json"])
        return requestBuilder
    }

}
